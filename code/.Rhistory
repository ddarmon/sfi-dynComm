source('~/Documents/R/journal-club/power-net.R')
source('~/Documents/R/journal-club/power-net.R')
plot(x.eval, F.eval, log = log.type, type = 'p', pch = 16, cex = 0.5)
plot(x.eval.scaled, F.scaled.eval, log = log.type, type = 'p', pch = 16, cex = 0.5)
n = 55
d = 8000
X = matrix(rnorm(n*d), ncol = d, nrow=n)
Sigma = abs(cor(X))
diag(Sigma) = 0
degrees = rowMeans(Sigma)
plot(density(degrees))
beta = 100
Sigma.scaled = Sigma^beta
degrees.scaled = rowMeans(Sigma.scaled)
plot(density(degrees))
plot(density(degrees.scaled))
F = ecdf(degrees)
F.scaled = ecdf(degrees.scaled)
x.eval = seq(min(degrees), max(degrees), length.out=1000)
x.eval.scaled = seq(min(degrees.scaled), max(degrees.scaled), length.out=1000)
F.eval = F(x.eval)
F.scaled.eval = F.scaled(x.eval.scaled)
log.type = 'xy'
plot(x.eval, F.eval, log = log.type, type = 'p', pch = 16, cex = 0.5)
plot(x.eval.scaled, F.scaled.eval, log = log.type, type = 'p', pch = 16, cex = 0.5)
library(VGAM)
min.hat = min(degrees.scaled)
alpha.hat = d/sum(log(degrees.scaled) - log(min.hat))
degrees.sim = rpareto(d, location=min.hat, shape=alpha.hat)
min.hat.synth = min(degrees.sim)
alpha.hat.synth = d/sum(log(degrees.sim) - log(min.hat.synth))
# F.sim = ecdf(degrees.sim)
# x.eval.sim = seq(min(degrees.sim), max(degrees.sim), length.out=10000)
#
# F.sim.eval = F.sim(x.eval.sim)
#
# plot(x.eval.sim, F.sim.eval, log = log.type, type = 'p', pch = 16, cex = 0.5)
beta = 7
Sigma.scaled = Sigma^beta
degrees.scaled = rowMeans(Sigma.scaled)
plot(density(degrees))
plot(density(degrees.scaled))
F = ecdf(degrees)
F.scaled = ecdf(degrees.scaled)
x.eval = seq(min(degrees), max(degrees), length.out=1000)
x.eval.scaled = seq(min(degrees.scaled), max(degrees.scaled), length.out=1000)
F.eval = F(x.eval)
F.scaled.eval = F.scaled(x.eval.scaled)
log.type = 'xy'
plot(x.eval, F.eval, log = log.type, type = 'p', pch = 16, cex = 0.5)
plot(x.eval.scaled, F.scaled.eval, log = log.type, type = 'p', pch = 16, cex = 0.5)
library(VGAM)
min.hat = min(degrees.scaled)
alpha.hat = d/sum(log(degrees.scaled) - log(min.hat))
degrees.sim = rpareto(d, location=min.hat, shape=alpha.hat)
min.hat.synth = min(degrees.sim)
alpha.hat.synth = d/sum(log(degrees.sim) - log(min.hat.synth))
# F.sim = ecdf(degrees.sim)
# x.eval.sim = seq(min(degrees.sim), max(degrees.sim), length.out=10000)
#
# F.sim.eval = F.sim(x.eval.sim)
#
# plot(x.eval.sim, F.sim.eval, log = log.type, type = 'p', pch = 16, cex = 0.5)
degrees.sim
min(degrees.sim)
max(degrees.sim)
F.sim = ecdf(degrees.sim)
x.eval.sim = seq(min(degrees.sim), max(degrees.sim), length.out=10000)
F.sim.eval = F.sim(x.eval.sim)
plot(x.eval.sim, F.sim.eval, log = log.type, type = 'p', pch = 16, cex = 0.5)
min.hat
alpha.hat
source('~/Documents/R/journal-club/power-net.R')
plot(ecdf(degrees.sim))
plot(ecdf(degrees.sim), log = 'y')
plot(ecdf(degrees.sim), log = 'xy')
plot(ecdf(degrees.sim))
plot(x.eval.sim, F.sim.eval, log = log.type, type = 'p', pch = 16, cex = 0.5)
hist(degrees.sim)
hist(degrees.sim, breaks = 1000)
plot(x.eval.sim, F.sim.eval, log = log.type, type = 'p', pch = 16, cex = 0.5)
plot(x.eval.sim, 1-F.sim.eval, log = log.type, type = 'p', pch = 16, cex = 0.5)
plot(x.eval, 1-F.eval, log = log.type, type = 'p', pch = 16, cex = 0.5)
plot(x.eval.scaled, 1-F.scaled.eval, log = log.type, type = 'p', pch = 16, cex = 0.5)
plot(x.eval.sim, 1-F.sim.eval, log = log.type, type = 'p', pch = 16, cex = 0.5)
source('~/Documents/R/journal-club/power-net.R')
source('~/Documents/R/journal-club/power-net.R')
source('~/Documents/R/journal-club/power-net.R')
source('~/Documents/R/quantified-self/weight.R')
source('~/Documents/R/quantified-self/weight.R')
source('~/Documents/R/quantified-self/weight.R')
source('~/Documents/R/Research/rumor-models/cond-probs.R')
source('~/Documents/R/Research/rumor-models/cond-probs.R')
plot(0:num.inputs, p.bass, pch = 16, cex = 0.75, ylim = c(0, 1), col = 'red', xlab = 'Number of Active Parents', ylab = 'P(X = 1 | Active Parents)')
source('~/Documents/R/Research/rumor-models/cond-probs.R')
source('~/Documents/R/Research/rumor-models/cond-probs.R', echo=TRUE)
source('~/Documents/R/quantified-self/weight.R')
source('~/Documents/R/quantified-self/weight.R')
source('~/Documents/R/quantified-self/weight.R')
install.packages('sm')
library(sm)
library(playwith)
weight = read.csv('/Users/daviddarmon/Documents/Reference/M/Metrics/WeightWithMovingAverage/Weight.dat', sep='\t', header = FALSE, comment.char = "#")
days = seq(as.Date("2010/5/27"), length.out = length(weight[,1]), by = 'days')
weight = weight[, 2]
trend = sm.regression.autocor(days, weight)
trend = sm.regression.autocor(days, weight,h.first=1)
trend = sm.regression.autocor(days, weight,h.first=1, minh = 0.5, maxh = 10)
trend
trend$estimate
trend$model.y
weight
plot(trend$model.y)
trend2 = sm.regression(days, weight, h=1)
trend2 = sm.regression(days, weight, h=10)
trend$aux$h.first
trend$aux$first.sm
plot(trend$aux$first.sm)
plot(trend$aux$first.sm, type = 'l')
plot(trend$aux$raw.residuals)
plot(trend$aux$raw.residuals, type = 'l')
trend2 = sm.regression(days, weight, h=0.5)
trend2 = sm.regression(days, weight, h=0.25)
trend2 = sm.regression(days, weight, h=30)
trend2 = sm.regression(days, weight, h=50)
trend2 = sm.regression(days, weight, h=100)
trend2 = sm.regression(days, weight, h=20)
trend2 = sm.regression(days, weight, h=1)
trend2 = sm.regression(days, weight, h=50)
trend2 = sm.regression(days, weight, h=20)
trend2 = sm.regression(days, weight, h=30)
trend2 = sm.regression(days, weight, h=10)
trend2 = sm.regression(days, weight, h=5)
trend2 = sm.regression(days, weight, h=2)
trend2 = sm.regression(days, weight, h=5)
trend2 = sm.regression(days, weight, h=2)
trend2 = sm.regression(days, weight, h=5)
trend2 = sm.regression(days, weight, h=30)
trend = sm.regression.autocor(days, weight,h.first=5, minh = 5, maxh = 50)
trend$eval.points
trend$estimate
trend$h
trend2 = sm.regression(days, weight, h=5)
plot(trend$eval.points, trend$estimate)
plot(trend$eval.points, trend$estimate, type = 'l')
source('~/Documents/R/quantified-self/weight.R')
source('~/Documents/R/quantified-self/weight.R')
source('~/Documents/R/quantified-self/weight.R')
source('~/Documents/R/quantified-self/weight.R')
par (mfrow=c(3,3), mar=c(1,1,1,1))
for (i in 1:9) hist (rt (100, 2), xlab="", ylab="", main="")
hist(rcauchy(10000))
par (mfrow=c(1,1), mar=c(1,1,1,1))
hist(rcauchy(10000))
par (mfrow=c(1,1), mar=rep(2, 4))
hist(rcauchy(10000))
par (mfrow=c(1,1), mar=rep(5, 4))
hist(rcauchy(10000))
source('~/.active-rstudio-document')
?write.csv
?write.table
hist(rexp(10000))
hist(rexp(10000), breaks = 100)
hist(rexp(100000), breaks = 100)
source('~/Documents/R/books/nonlinear-time-series/nonstationary-singlesided.R')
Xs[1] = runif(1)
source('~/Documents/R/books/nonlinear-time-series/nonstationary-singlesided.R')
plot(Xs)
plot(Xs, type = 'l')
source('~/Documents/R/books/nonlinear-time-series/nonstationary-singlesided.R')
plot(Xs, type = 'l')
Xs = matrix(0, ncol = N, nrow = trials)
trials = 1000
Xs = matrix(0, ncol = N, nrow = trials)
source('~/Documents/R/books/nonlinear-time-series/nonstationary-singlesided.R')
Xs
X.mean = colMeans(Xs)
plot(X.mean)
source('~/Documents/R/books/nonlinear-time-series/nonstationary-singlesided.R')
source('~/Documents/R/books/nonlinear-time-series/nonstationary-singlesided.R')
lines(mean)
lines(mean, type = 'l')
lines(mean, col = 'red')
source('~/Documents/R/books/nonlinear-time-series/nonstationary-singlesided.R')
plot(X.mean, type = 'l', xlim = c(0,100))
mean = rep(0.5, N)^((1:N)+1)
lines(mean, col = 'red')
mean = rep(0.5, N)^((1:N))
lines(mean, col = 'red')
plot(X.mean, type = 'l', xlim = c(0,100))
lines(mean, col = 'red')
source('~/Documents/R/books/nonlinear-time-series/nonstationary-singlesided.R')
source('~/Documents/R/books/nonlinear-time-series/nonstationary-singlesided.R')
source('~/Documents/R/books/nonlinear-time-series/nonstationary-singlesided.R')
source('~/Documents/R/books/nonlinear-time-series/nonstationary-singlesided.R')
source('~/Documents/R/books/nonlinear-time-series/nonstationary-singlesided.R')
source('~/Documents/R/books/nonlinear-time-series/nonstationary-singlesided.R')
source('~/Documents/R/books/nonlinear-time-series/nonstationary-singlesided.R')
source('~/Documents/R/books/nonlinear-time-series/nonstationary-singlesided.R')
source('~/Documents/R/books/nonlinear-time-series/nonstationary-singlesided.R')
source('~/Documents/R/books/nonlinear-time-series/nonstationary-singlesided.R')
source('~/Documents/R/books/nonlinear-time-series/nonstationary-singlesided.R')
source('~/Documents/R/books/nonlinear-time-series/nonstationary-singlesided.R')
source('~/Documents/R/books/nonlinear-time-series/nonstationary-singlesided.R')
source('~/Documents/R/books/nonlinear-time-series/nonstationary-singlesided.R')
source('~/Documents/R/books/nonlinear-time-series/nonstationary-singlesided.R')
source('~/Documents/R/books/nonlinear-time-series/nonstationary-singlesided.R')
source('~/Documents/R/books/nonlinear-time-series/nonstationary-singlesided.R')
source('~/Documents/R/books/nonlinear-time-series/nonstationary-singlesided.R')
source('~/Documents/R/blog/finite-support-KDE/transformation_trick_log.R')
list(x.eval, fhat)
tmp = list(x.eval, fhat)
tmp
tmp = data.frame(x.eval, fhat)
tmp = list(x.eval = x.eval, fhat = fhat.trimmed)
tmp
source('~/Documents/R/blog/finite-support-KDE/method_log.R')
x.eval = out$x.eval; fhat.trimmed = out$fhat
source('~/Documents/R/blog/finite-support-KDE/method_log.R')
source('~/Documents/R/blog/finite-support-KDE/method_log.R')
source('~/Documents/R/blog/finite-support-KDE/method_log.R')
plot(x.eval, fhat.trimmed, type = 'l', col = 'blue')
hist(x, freq = FALSE, xlab = 'x', ylab = 'Estimated Density', main = '', xlim = c(-2, 10), ylim = c(0, 1.5), add = T)
source('~/.active-rstudio-document')
source('~/Documents/R/blog/finite-support-KDE/method_log.R')
source('~/Documents/R/blog/finite-support-KDE/method_log.R')
source('~/Documents/R/blog/finite-support-KDE/method_log.R')
source('~/Documents/R/blog/finite-support-KDE/method_log.R')
fhat.trimmed.default = density(x, from = 0)
plot(fhat.trimmed.default, add = T)
plot(fhat.trimmed.default, add = T)
plot(x.eval, fhat.trimmed, type = 'l', col = 'blue', xlim = c(-2, 10))
hist(x, freq = FALSE, xlab = 'x', ylab = 'Estimated Density', main = '', ylim = c(0, 1.5), add = T)
plot(fhat.trimmed.default, add = T)
plot(fhat.trimmed.default, add = T, type = 'l')
fhat.trimmed
fhat.trimmed
plot(fhat.trimmed.default, type = 'l')
plot(x.eval, fhat.trimmed, type = 'l', col = 'blue', xlim = c(-2, 10), add = T)
hist(x, freq = FALSE, xlab = 'x', ylab = 'Estimated Density', main = '', ylim = c(0, 1.5), add = T)
plot(fhat.trimmed.default, type = 'l')
lines(x.eval, fhat.trimmed, type = 'l', col = 'blue', xlim = c(-2, 10), add = T)
hist(x, freq = FALSE, xlab = 'x', ylab = 'Estimated Density', main = '', ylim = c(0, 1.5), add = T)
plot(x.eval, fhat.trimmed, type = 'l', col = 'blue', xlim = c(-2, 10))
hist(x, freq = FALSE, xlab = 'x', ylab = 'Estimated Density', main = '', ylim = c(0, 1.5), add = T)
lines(fhat.trimmed.default, type = 'l')
fname = sprintf('/Users/daviddarmon/Documents/Reference/R/Research/2013/network/tweetpredict/follower_activity_2011/follower_activity_%s.dat', userid)
source('~/Documents/R/Research/tweetpredict/followers_by_hour.R')
source('~/Documents/R/Research/tweetpredict/followers_by_hour.R')
ts
plot(ts[, 2])
plot(ts[, 2], type = 'l')
ts = read.csv(fname, sep = ',', header = FALSE, xlab = 'Time (hours)', ylab = 'Number of Tweets by Followers')
plot(ts[,2], xlab = 'Time (hours)', ylab = 'Number of Tweets by Followers')
plot(ts[,2], xlab = 'Time (hours)', ylab = 'Number of Tweets by Followers', type = 'l')
source('~/Documents/R/Research/tweetpredict/followers_by_hour.R')
source('~/Documents/R/Research/tweetpredict/followers_by_hour.R')
source('~/Documents/R/Research/tweetpredict/followers_by_hour.R')
source('~/Documents/R/Research/tweetpredict/followers_by_hour.R')
source('~/Documents/R/Research/tweetpredict/followers_by_hour.R')
source('~/Documents/R/Research/tweetpredict/followers_by_hour.R')
source('~/Documents/R/Research/tweetpredict/followers_by_hour.R')
source('~/Documents/R/Research/tweetpredict/followers_by_hour.R')
source('~/Documents/R/Research/tweetpredict/followers_by_hour.R')
Sys.glob('/Users/daviddarmon/Documents/Reference/R/Research/2013/network/tweetpredict/follower_activity_2011/*')
files = Sys.glob('/Users/daviddarmon/Documents/Reference/R/Research/2013/network/tweetpredict/follower_activity_2011/*')
files = Sys.glob('/Users/daviddarmon/Documents/Reference/R/Research/2013/network/tweetpredict/follower_activity_2011/*')
source('~/Documents/R/Research/tweetpredict/followers_by_hour.R')
source('~/Documents/R/Research/tweetpredict/followers_by_hour.R')
source('~/Documents/R/Research/tweetpredict/followers_by_hour.R')
ts
ts[1]
ts[1,1]
ts[1+168,1]
24*7
source('~/Documents/R/Research/tweetpredict/followers_by_hour.R')
1440/(7*24)
source('~/Documents/R/Research/tweetpredict/followers_by_hour.R')
(1+(week.ind - 1)*24*7):(week.ind-1)*24*7
1+(week.ind - 1)*24*7)
1+(week.ind - 1)*24*7
week.ind
(1+(week.ind - 1)*24*7)
source('~/Documents/R/Research/tweetpredict/followers_by_hour.R')
ts[(1+(week.ind - 1)*24*7):((week.ind-1)*24*7), 2]
(1+(week.ind - 1)*24*7):((week.ind-1)*24*7)
source('~/Documents/R/Research/tweetpredict/followers_by_hour.R')
source('~/Documents/R/Research/tweetpredict/followers_by_hour.R')
source('~/Documents/R/Research/tweetpredict/followers_by_hour.R')
source('~/Documents/R/Research/tweetpredict/followers_by_hour.R')
source('~/Documents/R/Research/tweetpredict/followers_by_hour.R')
source('~/Documents/R/Research/tweetpredict/followers_by_hour.R')
lines(ts.averaged)
source('~/.active-rstudio-document')
source('~/Documents/R/Research/tweetpredict/followers_by_hour.R')
inds = sample(1:length(files))
inds
source('~/Documents/R/Research/tweetpredict/followers_by_hour.R')
x = list()
x
x = c(x, 1)
x = c(x, 1)
?readline
?readLine
?readLines
x = c(1, 2, 3)
library(ggplot)
library(ggplot2)
diamond
data(diamond)
?ggplot2
read.csv('overlap_counts.txt')
read.csv('overlap_counts.txt')
data = read.csv('overlap_counts.txt')
data
data = read.csv('overlap_counts.txt', sep = ' ')
data
data
ggplot(data, aes(clarity), fill = comm.type)
ggplot(data, aes(clarity), fill = comm.type) + geom_bar(position="dodge")
ggplot(data, fill = comm.type) + geom_bar(position="dodge")
ggplot(data, fill = comm.type) + geom_bar(position="dodge")
diamonds
diamonds[1:10,]
data = read.csv('overlap_counts.txt', sep = ' ')
data = read.csv('overlap_counts.txt', sep = ' ', row.names = FALSE)
data = read.csv('overlap_counts.txt', sep = ' ',)
?read.csv
data = read.table('overlap_counts.txt', sep = ' ')
data = read.table('overlap_counts.txt', sep = ' ', row.names = NULL)
data
data = read.table('overlap_counts.txt', sep = ' ', row.names = NULL)
data
data = read.table('overlap_counts.txt', sep = ' ', row.names = NULL, header = TRUE)
data
ggplot(data, aes(size, fill = community))
barplot(data)
barplot(datamtcars)
mtcars
mtcars$vs
mtcars$gear
source('~/.active-rstudio-document')
mtcars$gear
counts <- table(mtcars$vs, mtcars$gear)
counts
data
barplot(data)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
data
barplot(data)
source('~/.active-rstudio-document')
source('/Users/daviddarmon/Documents/R/barplot.R')
data <- read.table(text = "A   B   C   D   E   F    G
1 480 780 431 295 670 360  190
2 720 350 377 255 340 615  345
3 460 480 179 560  60 735 1260
4 220 240 876 789 820 100   75", header = TRUE)
data
barplot(data)
barplot(as.matrix(data))
data
source('/Users/daviddarmon/Documents/R/barplot.R')
source('/Users/daviddarmon/Documents/R/barplot.R')
data
melt(data)
library(ggplot2)
melt
?melt
library(reshape)
install.packages('reshape')
install.packages('reshape')
data = data = read.table('overlap_counts_old2.txt', sep = ' ', header = TRUE)
data
source('~/.active-rstudio-document')
source('/Users/daviddarmon/Documents/R/barplot.R')
source('/Users/daviddarmon/Documents/R/barplot.R')
data
source('/Users/daviddarmon/Documents/R/barplot.R')
library(reshape)
source('/Users/daviddarmon/Documents/R/barplot.R')
data
source('/Users/daviddarmon/Documents/R/barplot.R')
source('~/.active-rstudio-document')
source('/Users/daviddarmon/Documents/R/barplot.R')
source('/Users/daviddarmon/Documents/R/barplot.R')
source('/Users/daviddarmon/Documents/R/barplot.R')
source('/Users/daviddarmon/Documents/R/barplot.R')
source('/Users/daviddarmon/Documents/R/barplot.R')
source('/Users/daviddarmon/Documents/R/barplot.R')
source('/Users/daviddarmon/Documents/R/barplot.R')
data.
data
barplot(data)
source('~/.active-rstudio-document')
source('/Users/daviddarmon/Documents/R/barplot.R')
source('/Users/daviddarmon/Documents/R/barplot.R')
data
melt
install.packages('reshape')
source('/Users/daviddarmon/Documents/R/barplot.R')
data
source('/Users/daviddarmon/Documents/R/barplot.R')
source('/Users/daviddarmon/Documents/R/barplot.R')
data
data$type
data$count
ggplot(data, aes(count, fill = type))
diamnods
library(ggplot2)
diamonds
source('/Users/daviddarmon/Documents/R/barplot.R')
source('/Users/daviddarmon/Documents/R/barplot.R')
source('/Users/daviddarmon/Documents/R/barplot.R')
source('/Users/daviddarmon/Documents/R/barplot.R')
source('/Users/daviddarmon/Documents/R/barplot.R')
source('/Users/daviddarmon/Documents/R/barplot.R')
source('/Users/daviddarmon/Documents/R/barplot.R')
source('/Users/daviddarmon/Documents/R/barplot.R')
data
data$type
data$count
data$type = factor(data$type)
data$type
data$count = factor(data$count)
ggplot(data, aes(count, fill = type)) + geom_bar(position="dodge")
source('/Users/daviddarmon/Documents/R/barplot.R')
source('/Users/daviddarmon/Documents/R/barplot.R')
source('/Users/daviddarmon/Documents/R/barplot.R')
ggplot(data, aes(count, fill = type)) + geom_bar(position="dodge") + xlab('Size of Overlap') + ylab('Number of Users')
ggplot(data, aes(count, fill = type)) + geom_bar(position="dodge") + xlab('Size of Overlap') + ylab('Number of Users')
ggplot(data, aes(count, fill = type)) + geom_bar(position="dodge") + xlab('Size of Overlap') + ylab('Number of Users') + scale_y_continuous(trans=log10_trans())
ggplot(data, aes(count, fill = type)) + geom_bar(position="dodge") + xlab('Size of Overlap') + ylab('Number of Users') + scale_y_continuous(trans=log_trans())
2
ggplot(data, aes(count, fill = type)) + geom_bar(position="dodge") + xlab('Size of Overlap') + ylab('Number of Users') + scale_y_continuous(trans=log2_trans())
source('/Users/daviddarmon/Documents/R/barplot.R')
ggplot(data, aes(count, fill = type)) + geom_bar(position="dodge") + xlab('Size of Overlap') + ylab('Number of Users') + scale_y_continuous(trans=log10_trans())
table(data)
data
table(data)
source('/Users/daviddarmon/Documents/R/barplot.R')
ggplot(data, aes(count, fill = type)) + geom_bar(position="dodge") + xlab('Size of Overlap') + ylab('Number of Users') #+ scale_y_continuous(trans=log10_trans())
source('/Users/daviddarmon/Documents/R/barplot.R')
ggplot(data, aes(count, fill = type)) #+ geom_bar(position="dodge") + xlab('Size of Overlap') + ylab('Number of Users') #+ scale_y_continuous(trans=log10_trans())
ggplot(data, aes(count, fill = type)) + geom_bar(position="dodge") + xlab('Size of Overlap') + ylab('Number of Users') #+ scale_y_continuous(trans=log10_trans())
source('/Users/daviddarmon/Documents/R/barplot.R')
source('/Users/daviddarmon/Documents/R/barplot.R')
ggplot(data, aes(count, fill = type)) + geom_bar(position="dodge") + xlab('Size of Overlap') + ylab('Number of Users') #+ scale_y_continuous(trans=log10_trans())
ggplot(data, aes(count, fill = type)) + geom_bar(position="dodge") + xlab('Size of Overlap') + ylab('Number of Users') + scale_y_continuous(trans=log10_trans())
ggplot(data, aes(count, fill = type)) + geom_bar(position="dodge") + xlab('Size of Overlap') + ylab('Number of Users') #+ scale_y_continuous(trans=log10_trans())
table(data)
ggplot(data, aes(count)) + geom_bar() + facet_wrap(~ type)
ggplot(data, aes(type)) + geom_bar() + facet_wrap(~ count)
ggplot(data, aes(type, fill = type)) + geom_bar() + facet_wrap(~ count)
ggplot(data, aes(type, fill = type)) + geom_bar() + facet_wrap(~ count, scales = 'free')
ggplot(data, aes(type, fill = type)) + geom_bar() + facet_wrap(~ count, scales = 'free') + xlab('') + ylab('')
source('~/Documents/R/barplot.R')
ggplot(data, aes(type, fill = type)) + geom_bar() + facet_wrap(~ count, scales = 'free') + xlab('') + ylab('')
ggplot(data, aes(type, fill = type)) + geom_bar() + facet_wrap(~ count, scales = 'free') + xlab('Number of Users') + ylab('')
ggsave('overlap_by_type.pdf')
ggplot(data, aes(type, fill = type)) + geom_bar() + facet_wrap(~ count, scales = 'free') + xlab('Number of Users') + ylab('') + strip.text.x = theme_blank()
ggplot(data, aes(type, fill = type)) + geom_bar() + facet_wrap(~ count, scales = 'free') + xlab('Number of Users') + ylab('') + theme_blank()
ggplot(data, aes(type, fill = type)) + geom_bar() + facet_wrap(~ count, scales = 'free') + xlab('Number of Users') + ylab('') + element_blank()
?element_blank
ggplot(data, aes(type, fill = type)) + geom_bar() + facet_wrap(~ count, scales = 'free') + xlab('Number of Users') + ylab('') +  opts(strip.background = theme_blank(), strip.text.x = theme_blank())
ggplot(data, aes(type, fill = type)) + geom_bar() + facet_wrap(~ count, scales = 'free') + xlab('Number of Users') + ylab('') +  opts(strip.text.x = element_blank())
ggplot(data, aes(type, fill = type)) + geom_bar() + facet_wrap(~ count, scales = 'free') + xlab('Number of Users') + ylab('') +  theme(strip.text.x = element_blank())
ggplot(data, aes(type, fill = type)) + geom_bar() + facet_wrap(~ count, scales = 'free') + xlab('Number of Users') + ylab('') +  theme(strip.text.x = theme_text(size=0))
ggplot(data, aes(type, fill = type)) + geom_bar() + facet_wrap(~ count, scales = 'free') + xlab('Number of Users') + ylab('') +  theme(strip.text.x = element_text(size=0))
ggplot(data, aes(type, fill = type)) + geom_bar() + facet_wrap(~ count, scales = 'free') + xlab('Number of Users') + ylab('')
ggplot(data, aes(type, fill = type)) + geom_bar() + facet_wrap(~ count, scales = 'free') + xlab('') + ylab('Number of Users')
ggplot(data, aes(type, fill = type)) + geom_bar() + facet_wrap(~ count, scales = 'free') + xlab('') + ylab('Number of Users') + theme(text = element_text(size=20),
ggplot(data, aes(type, fill = type)) + geom_bar() + facet_wrap(~ count, scales = 'free') + xlab('') + ylab('Number of Users') + theme(text = element_text(size=20))
ggplot(data, aes(type, fill = type)) + geom_bar() + facet_wrap(~ count, scales = 'free') + xlab('') + ylab('Number of Users') + theme(text = element_text(size=20))
source('~/.active-rstudio-document')
source('~/Documents/R/barplot.R')
source('~/Documents/R/barplot.R')
ggplot(data, aes(type, fill = type)) + geom_bar() + facet_wrap(~ count, scales = 'free') + xlab('') + ylab('Number of Users') + theme(text = element_text(size=20))
ggplot(data, aes(type, fill = type)) + geom_bar() + facet_wrap(~ count, scales = 'free') + xlab('') + ylab('Number of Users') + theme(text = element_text(size=20)) + theme(axis.text.x=element_text(angle=90, hjust=1))
ggplot(data, aes(type, fill = type)) + geom_bar() + facet_wrap(~ count, scales = 'free') + xlab('') + ylab('Number of Users') + theme(text = element_text(size=20)) + theme(axis.text.x=element_text(angle=90, hjust=0))
ggplot(data, aes(type, fill = type)) + geom_bar() + facet_wrap(~ count, scales = 'free') + xlab('') + ylab('Number of Users') + theme(text = element_text(size=20)) + theme(axis.text.x=element_text(angle=90))
ggplot(data, aes(type, fill = type)) + geom_bar() + facet_wrap(~ count, scales = 'free') + xlab('') + ylab('Number of Users') + theme(text = element_text(size=30)) + theme(axis.text.x=element_text(angle=90))
ggplot(data, aes(type, fill = type)) + geom_bar() + facet_wrap(~ count, scales = 'free') + xlab('') + ylab('Number of Users') + theme(text = element_text(size=20)) + theme(axis.text.x=element_text(angle=90))
ggsave('overlap_by_type.pdf')
source('~/Documents/R/barplot.R')
ggplot(data, aes(type, fill = type)) + geom_bar() + facet_wrap(~ count, scales = 'free') + xlab('Number of Memberships') + ylab('Number of Users') + theme(text = element_text(size=20)) + theme(axis.text.x=element_text(angle=90))
ggsave('overlap_by_type.pdf')
source('~/Documents/Reference/R/Research/2013/sfi-dynComm/code/analyze_weights_by_community_types.R')
setwd("~/Documents/Reference/R/Research/2013/sfi-dynComm/code")
source('~/Documents/Reference/R/Research/2013/sfi-dynComm/code/analyze_weights_by_community_types.R')
source('~/Documents/Reference/R/Research/2013/sfi-dynComm/code/analyze_weights_by_community_types.R')
min1
min2
min3
.Machine
min1 = data_i.to.i[which.min(data_i.to.i)]; min2 = data_e.to.i[which.min(data_e.to.i)]; min3 = data_i.to.e[which.min(data_i.to.e)]
log10(min1)
log10(min2)
log10(min3)
min1 log10(min(data_i.to.i))
min1 = log10(min(data_i.to.i))
min1
xmin = 10^(min(c(min1, min2, min3)))
xmin
min1 = log10(min(data_i.to.i)); min2 = log10(min(data_e.to.i)); min3 = log10(min(data_i.to.e))
source('~/Documents/Reference/R/Research/2013/sfi-dynComm/code/analyze_weights_by_community_types.R')
min1
min2
min3
data_i.to.i
min(data_i.to.i)
source('~/Documents/Reference/R/Research/2013/sfi-dynComm/code/analyze_weights_by_community_types.R')
